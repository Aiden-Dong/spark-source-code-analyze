-- Automatically generated by SQLQueryTestSuite
-- Number of queries: 18


-- !query 0
select * from values ("one", 1)
-- !query 0 schema
struct<col1:string,col2:int>
-- !query 0 output
one	1


-- !query 1
select * from values ("one", 1) as data
-- !query 1 schema
struct<col1:string,col2:int>
-- !query 1 output
one	1


-- !query 2
select * from values ("one", 1) as data(a, b)
-- !query 2 schema
struct<a:string,b:int>
-- !query 2 output
one	1


-- !query 3
select * from values 1, 2, 3 as data(a)
-- !query 3 schema
struct<a:int>
-- !query 3 output
1
2
3


-- !query 4
select * from values ("one", 1), ("two", 2), ("three", null) as data(a, b)
-- !query 4 schema
struct<a:string,b:int>
-- !query 4 output
one	1
three	NULL
two	2


-- !query 5
select * from values ("one", null), ("two", null) as data(a, b)
-- !query 5 schema
struct<a:string,b:null>
-- !query 5 output
one	NULL
two	NULL


-- !query 6
select * from values ("one", 1), ("two", 2L) as data(a, b)
-- !query 6 schema
struct<a:string,b:bigint>
-- !query 6 output
one	1
two	2


-- !query 7
select * from values ("one", 1 + 0), ("two", 1 + 3L) as data(a, b)
-- !query 7 schema
struct<a:string,b:bigint>
-- !query 7 output
one	1
two	4


-- !query 8
select * from values ("one", array(0, 1)), ("two", array(2, 3)) as data(a, b)
-- !query 8 schema
struct<a:string,b:array<int>>
-- !query 8 output
one	[0,1]
two	[2,3]


-- !query 9
select * from values ("one", 2.0), ("two", 3.0D) as data(a, b)
-- !query 9 schema
struct<a:string,b:double>
-- !query 9 output
one	2.0
two	3.0


-- !query 10
select * from values ("one", rand(5)), ("two", 3.0D) as data(a, b)
-- !query 10 schema
struct<>
-- !query 10 output
org.apache.spark.sql.AnalysisException
cannot evaluate expression rand(5) in inline table definition; line 1 pos 29


-- !query 11
select * from values ("one", 2.0), ("two") as data(a, b)
-- !query 11 schema
struct<>
-- !query 11 output
org.apache.spark.sql.AnalysisException
expected 2 columns but found 1 columns in row 1; line 1 pos 14


-- !query 12
select * from values ("one", array(0, 1)), ("two", struct(1, 2)) as data(a, b)
-- !query 12 schema
struct<>
-- !query 12 output
org.apache.spark.sql.AnalysisException
incompatible types found in column b for inline table; line 1 pos 14


-- !query 13
select * from values ("one"), ("two") as data(a, b)
-- !query 13 schema
struct<>
-- !query 13 output
org.apache.spark.sql.AnalysisException
expected 2 columns but found 1 columns in row 0; line 1 pos 14


-- !query 14
select * from values ("one", random_not_exist_func(1)), ("two", 2) as data(a, b)
-- !query 14 schema
struct<>
-- !query 14 output
org.apache.spark.sql.AnalysisException
Undefined function: 'random_not_exist_func'. This function is neither a registered temporary function nor a permanent function registered in the database 'default'.; line 1 pos 29


-- !query 15
select * from values ("one", count(1)), ("two", 2) as data(a, b)
-- !query 15 schema
struct<>
-- !query 15 output
org.apache.spark.sql.AnalysisException
cannot evaluate expression count(1) in inline table definition; line 1 pos 29


-- !query 16
select * from values (timestamp('1991-12-06 00:00:00.0'), array(timestamp('1991-12-06 01:00:00.0'), timestamp('1991-12-06 12:00:00.0'))) as data(a, b)
-- !query 16 schema
struct<a:timestamp,b:array<timestamp>>
-- !query 16 output
1991-12-06 00:00:00	[1991-12-06 01:00:00.0,1991-12-06 12:00:00.0]


-- !query 17
EXPLAIN EXTENDED SELECT * FROM VALUES ('one', 1), ('three', null) CROSS JOIN VALUES ('one', 1), ('three', null)
-- !query 17 schema
struct<plan:string>
-- !query 17 output
== Parsed Logical Plan ==
'Project [*]
+- 'Join Cross
   :- 'UnresolvedInlineTable [col1, col2], [List(one, 1), List(three, null)]
   +- 'UnresolvedInlineTable [col1, col2], [List(one, 1), List(three, null)]

== Analyzed Logical Plan ==
col1: string, col2: int, col1: string, col2: int
Project [col1#x, col2#x, col1#x, col2#x]
+- Join Cross
   :- LocalRelation [col1#x, col2#x]
   +- LocalRelation [col1#x, col2#x]

== Optimized Logical Plan ==
Join Cross
:- LocalRelation [col1#x, col2#x]
+- LocalRelation [col1#x, col2#x]

== Physical Plan ==
BroadcastNestedLoopJoin BuildRight, Cross
:- LocalTableScan [col1#x, col2#x]
+- BroadcastExchange IdentityBroadcastMode
   +- LocalTableScan [col1#x, col2#x]
