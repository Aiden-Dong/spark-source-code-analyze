-- Automatically generated by SQLQueryTestSuite
-- Number of queries: 20


-- !query 0
create or replace temporary view nested as values
  (1, array(32, 97), array(array(12, 99), array(123, 42), array(1))),
  (2, array(77, -76), array(array(6, 96, 65), array(-1, -2))),
  (3, array(12), array(array(17)))
  as t(x, ys, zs)
-- !query 0 schema
struct<>
-- !query 0 output



-- !query 1
select upper(x -> x) as v
-- !query 1 schema
struct<>
-- !query 1 output
org.apache.spark.sql.AnalysisException
A lambda function should only be used in a higher order function. However, its class is org.apache.spark.sql.catalyst.expressions.Upper, which is not a higher order function.; line 1 pos 7


-- !query 2
select transform(zs, z -> z) as v from nested
-- !query 2 schema
struct<v:array<array<int>>>
-- !query 2 output
[[12,99],[123,42],[1]]
[[17]]
[[6,96,65],[-1,-2]]


-- !query 3
select transform(ys, y -> y * y) as v from nested
-- !query 3 schema
struct<v:array<int>>
-- !query 3 output
[1024,9409]
[144]
[5929,5776]


-- !query 4
select transform(ys, (y, i) -> y + i) as v from nested
-- !query 4 schema
struct<v:array<int>>
-- !query 4 output
[12]
[32,98]
[77,-75]


-- !query 5
select transform(zs, z -> concat(ys, z)) as v from nested
-- !query 5 schema
struct<v:array<array<int>>>
-- !query 5 output
[[12,17]]
[[32,97,12,99],[32,97,123,42],[32,97,1]]
[[77,-76,6,96,65],[77,-76,-1,-2]]


-- !query 6
select transform(ys, 0) as v from nested
-- !query 6 schema
struct<v:array<int>>
-- !query 6 output
[0,0]
[0,0]
[0]


-- !query 7
select transform(cast(null as array<int>), x -> x + 1) as v
-- !query 7 schema
struct<v:array<int>>
-- !query 7 output
NULL


-- !query 8
select filter(ys, y -> y > 30) as v from nested
-- !query 8 schema
struct<v:array<int>>
-- !query 8 output
[32,97]
[77]
[]


-- !query 9
select filter(cast(null as array<int>), y -> true) as v
-- !query 9 schema
struct<v:array<int>>
-- !query 9 output
NULL


-- !query 10
select transform(zs, z -> filter(z, zz -> zz > 50)) as v from nested
-- !query 10 schema
struct<v:array<array<int>>>
-- !query 10 output
[[96,65],[]]
[[99],[123],[]]
[[]]


-- !query 11
select aggregate(ys, 0, (y, a) -> y + a + x) as v from nested
-- !query 11 schema
struct<v:int>
-- !query 11 output
131
15
5


-- !query 12
select aggregate(ys, (0 as sum, 0 as n), (acc, x) -> (acc.sum + x, acc.n + 1), acc -> acc.sum / acc.n) as v from nested
-- !query 12 schema
struct<v:double>
-- !query 12 output
0.5
12.0
64.5


-- !query 13
select transform(zs, z -> aggregate(z, 1, (acc, val) -> acc * val * size(z))) as v from nested
-- !query 13 schema
struct<v:array<int>>
-- !query 13 output
[1010880,8]
[17]
[4752,20664,1]


-- !query 14
select aggregate(cast(null as array<int>), 0, (a, y) -> a + y + 1, a -> a + 2) as v
-- !query 14 schema
struct<v:int>
-- !query 14 output
NULL


-- !query 15
select exists(ys, y -> y > 30) as v from nested
-- !query 15 schema
struct<v:boolean>
-- !query 15 output
false
true
true


-- !query 16
select exists(cast(null as array<int>), y -> y > 30) as v
-- !query 16 schema
struct<v:boolean>
-- !query 16 output
NULL


-- !query 17
select zip_with(ys, zs, (a, b) -> a + size(b)) as v from nested
-- !query 17 schema
struct<v:array<int>>
-- !query 17 output
[13]
[34,99,null]
[80,-74]


-- !query 18
select zip_with(array('a', 'b', 'c'), array('d', 'e', 'f'), (x, y) -> concat(x, y)) as v
-- !query 18 schema
struct<v:array<string>>
-- !query 18 output
["ad","be","cf"]


-- !query 19
select zip_with(array('a'), array('d', null, 'f'), (x, y) -> coalesce(x, y)) as v
-- !query 19 schema
struct<v:array<string>>
-- !query 19 output
["a",null,"f"]
